    startBeerenMinispiel() {
        this.beerenGefangen = 0;
        this.beerenZiel = 1;
        this.minispielAktiv = true;
      
        // Hintergrundbild anzeigen (statt dunklem Overlay)
        const bg = this.add.image(this.scale.width / 2, this.scale.height / 2, 'minigame')
          .setDisplaySize(this.scale.width, this.scale.height)
          .setDepth(0); // ganz unten
      
        // Korb (Spieler)
        const korb = this.physics.add.sprite(this.scale.width / 2, this.scale.height, 'korb')
          .setScale(2.5)
          .setDepth(1);
        korb.setCollideWorldBounds(true);
        korb.body.allowGravity = false;
        this.minispielKorb = korb;

        // 🍓 Zähler-Text anzeigen
        this.beerenText = this.add.text(20, 20, 'Beeren: 0 / ' + this.beerenZiel, {
        fontSize: '24px',
        fill: '#ffffff'
        }).setDepth(2).setShadow(2, 2, '#000', 2);
  
      
        // Steuerung
        this.minispielCursors = this.input.keyboard.createCursorKeys();
      
        // Beeren-Gruppe
        const beeren = this.physics.add.group();
        this.minispielBeeren = beeren;
      
        // Beeren spawnen
        this.minispielTimer = this.time.addEvent({
          delay: 800,
          callback: () => {
            const x = Phaser.Math.Between(50, this.scale.width - 50);
            const b = beeren.create(x, -20, 'beere').setScale(2.0);
            b.setVelocityY(200);
            b.setDepth(1);
          },
          loop: true
        });

        // Boden-Zone, wo Beeren „verloren“ gehen
        this.beerenBoden = this.physics.add.staticImage(
            this.scale.width / 2,
            this.scale.height + 20, // etwas unterhalb sichtbarem Bereich
            null
        ).setSize(this.scale.width, 40).setVisible(false);
        
        // Kollision mit Boden
        this.physics.add.overlap(this.beerenBoden, this.minispielBeeren, (boden, beere) => {
            beere.destroy();
        
            // 🧮 -1 Beere, aber nicht unter 0
            this.beerenGefangen = Math.max(0, this.beerenGefangen - 1);
            this.beerenText.setText('Beeren: ' + this.beerenGefangen + ' / ' + this.beerenZiel);
        });
  
        // Kollision Korb <-> Beere
        this.physics.add.overlap(korb, beeren, (korb, beere) => {
          beere.destroy();
          this.beerenGefangen++;
          // 🆕 Beeren-Text aktualisieren
          this.beerenText.setText('Beeren: ' + this.beerenGefangen + ' / ' + this.beerenZiel);
          if (this.beerenGefangen >= this.beerenZiel) {
            this.beendenBeerenMinispiel(bg, korb, beeren);
          }
        });        
    }
    beendenBeerenMinispiel(bg, korb, beeren) {
        this.minispielAktiv = false;
        this.minispielTimer.remove();
        korb.destroy();
        beeren.clear(true, true);
        bg.destroy();
        this.beerenText.destroy(); // 🍓 Counter entfernen
        this.showDialog('hase', [
          'Yay! Du hast genug Beeren gefangen! 🍓',
          'Jetzt kann ich endlich Marmelade machen!'
        ], () => {
          this.fuchs.setVisible(true);
          this.fuchs.body.enable = true;
        });
    }






    

            // 👉 Funktion separat, damit man sie bei falscher Antwort wiederverwenden kann
            zeigeRestaurantFrage() {
                const frage = 'Was ist unser Go-To-Restaurant für ein Date?';
                const antworten = ["l'osteria", "jins haus", "la lucha"];
                const korrekt = "la lucha";
            
                const frageText = this.add.text(this.scale.width / 2, 100, frage, {
                    fontSize: '22px',
                    fill: '#000',
                    align: 'center',
                    wordWrap: { width: this.scale.width - 100 }
                }).setOrigin(0.5);
            
                const antwortTextObjekte = [];
            
                antworten.forEach((antwort, index) => {
                    const antwortText = this.add.text(this.scale.width / 2, 180 + index * 40, antwort, {
                        fontSize: '20px',
                        fill: '#003366',
                        backgroundColor: '#eeeeee',
                        padding: { x: 10, y: 5 }
                    }).setOrigin(0.5).setInteractive();
            
                    antwortText.on('pointerdown', () => {
                        frageText.destroy();
                        antwortTextObjekte.forEach(obj => obj.destroy());
            
                        if (antwort === korrekt) {
                            this.showDialog('hase', [
                                'Richtig! 🍝',
                                'Der Fuchs wartet gleich da vorne!'
                            ], () => {
                                this.fuchs.setVisible(true);
                                this.fuchs.body.enable = true;
                            });
                        } else {
                            this.showDialog('hase', [
                                'Hmm... leider falsch 😢',
                                'Versuch es einfach nochmal!'
                            ], () => {
                                // 🔁 Wiederhole NUR die Frage
                                this.zeigeRestaurantFrage();
                            });
                        }
                    });
            
                    antwortTextObjekte.push(antwortText);
                });
            }

            zeigeJahrestagFrage() {
                const frage = "Was haben wir an unserem ersten Jahrestag gemacht?";
                const antworten = ["Fotobox", "Europapark", "Phantasialand"];
                const korrekt = "Europapark";
            
                const frageText = this.add.text(this.scale.width / 2, 100, frage, {
                    fontSize: '22px',
                    fill: '#000',
                    align: 'center',
                    wordWrap: { width: this.scale.width - 100 }
                }).setOrigin(0.5);
            
                const antwortTextObjekte = [];
            
                antworten.forEach((antwort, index) => {
                    const antwortText = this.add.text(this.scale.width / 2, 180 + index * 40, antwort, {
                        fontSize: '20px',
                        fill: '#003366',
                        backgroundColor: '#eeeeee',
                        padding: { x: 10, y: 5 }
                    }).setOrigin(0.5).setInteractive();
            
                    antwortText.on('pointerdown', () => {
                        frageText.destroy();
                        antwortTextObjekte.forEach(obj => obj.destroy());
            
                        if (antwort === korrekt) {
                            this.showDialog('fuchs', [
                                'Richtig! 🍝',
                                'Ich kann dir aber leider nicht sagen, wo Pingu ist.',
                                'Vielleicht weiß es das Eichhörnchen?',
                                'Frag es mal!', 
                                'Es ist im Haus im Wald.'
                            ], () => {
                                this.eichhoernchen.setVisible(true);
                                this.eichhoernchen.body.enable = true;
                            });
                        } else {
                            this.showDialog('fuchs', [
                                'Entäuschend.. 😢',
                                'Versuch es nochmal!'
                            ], () => {
                                // 🔁 Wiederhole NUR die Frage
                                this.zeigeJahrestagFrage();
                            });
                        }
                    });
            
                    antwortTextObjekte.push(antwortText);
                });
            }
            zeigePopoFrage() {
                const frage = "Wer liebt mehr Popos 🍑?";
                const antworten = ["PINGU", "HUNDI"];
                const korrekt = "PINGU";
            
                const frageText = this.add.text(this.scale.width / 2, 100, frage, {
                    fontSize: '22px',
                    fill: '#000',
                    align: 'center',
                    wordWrap: { width: this.scale.width - 100 }
                }).setOrigin(0.5);
            
                const antwortTextObjekte = [];
            
                antworten.forEach((antwort, index) => {
                    const antwortText = this.add.text(this.scale.width / 2, 180 + index * 40, antwort, {
                        fontSize: '20px',
                        fill: '#003366',
                        backgroundColor: '#eeeeee',
                        padding: { x: 10, y: 5 }
                    }).setOrigin(0.5).setInteractive();
            
                    antwortText.on('pointerdown', () => {
                        frageText.destroy();
                        antwortTextObjekte.forEach(obj => obj.destroy());
            
                        if (antwort === korrekt) {
                            this.showDialog('eichhörnchen', [
                                'Richtig! 🍝',
                                'Ich glaube sie war bis eben noch mit der Ente unterwegs.',
                                'Die Ente wohnt oben am Fluss.'
                            ], () => {
                                this.ente.setVisible(true);
                                this.ente.body.enable = true;
                            });
                        } else {
                            this.showDialog('fuchs', [
                                'Leider falsch.. 😢',
                                'Versuch es nochmal!'
                            ], () => {
                                // 🔁 Wiederhole NUR die Frage
                                this.zeigePopoFrage();
                            });
                        }
                    });
            
                    antwortTextObjekte.push(antwortText);
                });
            }


            zeigeFlirtFrage() {
                const frage = "Was sagst du, wenn du in Korea angeflirtet wirst?";
                const antworten = ["여자친구 있어요", "안녕하세요", "사랑해"];
                const korrekt = "여자친구 있어요";
            
                const frageText = this.add.text(this.scale.width / 2, 100, frage, {
                    fontSize: '22px',
                    fill: '#000',
                    align: 'center',
                    wordWrap: { width: this.scale.width - 100 }
                }).setOrigin(0.5);
            
                const antwortTextObjekte = [];
            
                antworten.forEach((antwort, index) => {
                    const antwortText = this.add.text(this.scale.width / 2, 180 + index * 40, antwort, {
                        fontSize: '20px',
                        fill: '#003366',
                        backgroundColor: '#eeeeee',
                        padding: { x: 10, y: 5 }
                    }).setOrigin(0.5).setInteractive();
            
                    antwortText.on('pointerdown', () => {
                        frageText.destroy();
                        antwortTextObjekte.forEach(obj => obj.destroy());
            
                        if (antwort === korrekt) {
                            this.showDialog('ente', [
                                'Richtig!',
                                'Pingu müsste im Beerenfeld ganz im Norden sein.',
                                'Ich hoffe du findest sie!'
                            ], () => {
                                this.ente.setVisible(true);
                                this.ente.body.enable = true;
                            });
                        } else {
                            this.showDialog('fuchs', [
                                'Leider falsch.. 😢',
                                'Versuch es nochmal!'
                            ], () => {
                                // 🔁 Wiederhole NUR die Frage
                                this.zeigeFlirtFrage();
                            });
                        }
                    });
            
                    antwortTextObjekte.push(antwortText);
                });
            }